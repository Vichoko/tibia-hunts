[tool.poetry]
name = "tibia-hunts"
version = "1.5.3"
description = ""
authors = ["vichoko <vicenteoyanedel@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
django = "^5.2"
gunicorn = "^23.0.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Configuración principal
line-length = 88
target-version = "py311"
fix = true

# Directorios a incluir/excluir
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Selección de reglas estrictas
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DJ",    # flake8-django
    "UP",    # pyupgrade
    "N",     # pep8-naming
    "S",     # flake8-bandit (security)
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "DTZ",   # flake8-datetimez
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # pylint
    "TRY",   # tryceratops
    "RUF",   # ruff-specific rules
]

# Reglas específicas a ignorar (ajustables según el proyecto)
ignore = [
    "S101",  # assert detected (útil en tests)
    "S311",  # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
]

# Permitir autofix para estas categorías
fixable = ["ALL"]
unfixable = []

# Reglas por archivo
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # asserts allowed in tests
    "ARG",   # unused function args in tests
    "S106",  # hardcoded passwords in tests
]
"src/**/views.py" = [
    "E501",  # Line too long (HTML content hardcodeado temporalmente)
    "ARG001",  # Unused function argument (Django view pattern)
    "S105",  # Possible hardcoded password (HTML content hardcodeado temporalmente)
]
"src/**/manage.py" = [
    "TRY003",  # Long messages in manage.py are OK
]

# Configuración de isort
[tool.ruff.lint.isort]
known-first-party = ["tibia_hunts"]
force-single-line = false
lines-after-imports = 2

# Configuración de quotes
[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

# Configuración de pylint
[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50
