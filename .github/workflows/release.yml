name: Release and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Use a PAT that can bypass branch protection rules
        token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release@21 @semantic-release/changelog@6 @semantic-release/git@10 @semantic-release/github@9 @semantic-release/exec@6 conventional-changelog-conventionalcommits@7

    - name: Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
      run: npx semantic-release

  deploy:
    name: Deploy to App Engine
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Checkout the release commit that includes version bump
        ref: main
        token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Poetry installation
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-dev

    - name: Export requirements.txt
      run: poetry export -f requirements.txt --output requirements.txt --without-hashes

    - name: Collect static files
      run: poetry run python src/manage.py collectstatic --noinput --settings=tibia_hunts.settings_production
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    - name: Run Django checks
      run: poetry run python src/manage.py check --deploy --settings=tibia_hunts.settings_production
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: tibia-hunts-app

    - name: Deploy to App Engine with semantic version
      run: |
        # Replace SECRET_KEY placeholder with actual secret
        sed -i "s/\${SECRET_KEY}/${{ secrets.DJANGO_SECRET_KEY }}/g" app.yaml

        # Deploy to App Engine with semantic release version as the version ID
        gcloud app deploy --quiet --no-cache --version=v${{ needs.release.outputs.new-release-version }}

    - name: Get deployment URL
      run: |
        echo "üöÄ Deployment successful!"
        echo "üì± Application URL: https://tibia-hunts-app.uc.r.appspot.com"
        echo "üè∑Ô∏è Version deployed: v${{ needs.release.outputs.new-release-version }}"
