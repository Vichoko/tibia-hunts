name: Deploy after Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.5.0)'
        required: true
        type: string

env:
  PROJECT_ID: tibia-hunts-app

jobs:
  deploy:
    name: Deploy to App Engine
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Use the release tag if triggered by release, otherwise use main
        ref: ${{ github.event.release.tag_name || 'main' }}

    - name: Set deployment version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        # Remove 'v' prefix if present and ensure it's valid for App Engine
        CLEAN_VERSION=$(echo $VERSION | sed 's/^v//' | sed 's/[^a-zA-Z0-9-]/-/g')
        echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Deploying version: ${CLEAN_VERSION}"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Poetry installation
      id: cache-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}

    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --only=main

    - name: Export requirements.txt
      run: poetry export -f requirements.txt --output requirements.txt --without-hashes

    - name: Collect static files
      run: poetry run python src/manage.py collectstatic --noinput --settings=tibia_hunts.settings_production
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    - name: Run Django checks
      run: poetry run python src/manage.py check --deploy --settings=tibia_hunts.settings_production
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Deploy to App Engine with semantic version
      run: |
        # Replace SECRET_KEY placeholder with actual secret
        sed -i "s/\${SECRET_KEY}/${{ secrets.DJANGO_SECRET_KEY }}/g" app.yaml

        # Deploy to App Engine with semantic release version
        gcloud app deploy --quiet --no-cache --version=${{ steps.version.outputs.version }}

    - name: Get deployment URL
      run: |
        echo "üöÄ Deployment successful!"
        echo "üì± Application URL: https://${{ env.PROJECT_ID }}.uc.r.appspot.com"
        echo "üè∑Ô∏è Version deployed: ${{ steps.version.outputs.version }}"
        echo "üîó Versioned URL: https://${{ steps.version.outputs.version }}-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com"
